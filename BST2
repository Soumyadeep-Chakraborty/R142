
#include <iostream>
using namespace std;

class node {

public:
int data;
node *parent;
node *left;
node *right;

node (){
parent=left=right=NULL;
}
};

class binarysearchtree {

public:
node *root;
#include <iostream>
using namespace std;

class node {

public:
int data;
node *parent;
node *left;
node *right;

node (){
parent=left=right=NULL;
}
};

class binarysearchtree {

public:
node *root;
binarysearchtree(){
root=NULL;
}

void insert(node *root,int data){
if (root=NULL){
node *temp=new node;
temp->data=data;
temp->parent=NULL;
temp->left=NULL;
temp->right=NULL;
root=temp;
}
else if (data < root->data){
if (root->left=NULL){
insertdata (root,data);}
else { 
insert (root->left,data);}}

else {
if (root->right=NULL){
insertdata (root,data);}
else {
insert (root->right,data);}}}

void insertdata (node *root,int data){
node *temp=new node;
temp->data=data;
temp->parent =root;
temp->left=NULL;
temp->right=NULL;
}

void display (node *temp){
if(temp==NULL){
cout<<"Error";
return 0;
}
else {
display (temp->left);
cout << temp->data;
display (temp->right);
}}


node* search (node *temp,int data){
if (temp==NULL;
cout<<"node not found";
return temp;}
else {
if(data=temp->data){
cout<<"Data Found";
return temp;}
else if (data < temp->data){
search (temp->left,data);}
else {
search (temp->right,data);}}

void delete (node *temp, int data){
node *temp1=new node;
temp1=search (temp, data);
if (temp1==NULL){
cout<<"Node Not Found";
return;
}

else {
if (temp1->left==NULL && temp1->right==NULL) {
delete temp;
}
else if (temp1->left==NULL || temp1->right==NULL){
if (temp1->left==NULL){
temp1->right->parent=temp1->parent;
temp1->parent->right=temp1->right;}
else {temp1->left->parent=temp1->parent;
temp1->parent->right=temp1->right;}}
else {












int main(){
binarysearchtree b;
int i;
int p;
int d;
int m=1;
while (m==1){
cout <<" Choose an option : 1.insert 2.display ";
cin>>i;

switch (i){
case 1 :
	cout<<"Enter Data : ";
	cin>>d;
	b.insert (b.root,d);
	break;
case 2 :
	b.display (b.root);
	break;
default :
	cout<<"Choose a valid option";
	break;
}

cout<<"Do you want to carry out more operations ? Enter y=1 or n=2 ~ ";
cin>>m;
}

return 0;
}
binarysearchtree(){
root=NULL;
}

void insert(node *root,int data){
if (root=NULL){
node *temp=new node;
temp->data=data;
temp->parent=NULL;
temp->left=NULL;
temp->right=NULL;
root=temp;
}
else if (data < root->data){
if (root->left=NULL){
insertdata (root,data);}
else { 
insert (root->left,data);}}

else {
if (root->right=NULL){
insertdata (root,data);}
else {
insert (root->right,data);}}}

void insertdata (node *root,int data){
node *temp=new node;
temp->data=data;
temp->parent =root;
temp->left=NULL;
temp->right=NULL;
}

void display (node *temp){
if(temp==NULL){
cout<<"Error";
return 0;
}
else {
display (temp->left);
cout << temp->data;
display (temp->right);
}}


node* search (node *temp,int data){
if (temp==NULL;
cout<<"node not found";
return temp;}
else {
if(data=temp->data){
cout<<"Data Found";
return temp;}
else if (data < temp->data){
search (temp->left,data);}
else {
search (temp->right,data);}}

void delete (node *temp, int data){
node *temp1=new node;
temp1=search (temp, data);
if (temp1==NULL){
cout<<"Node Not Found";
return;
}

else {
if (temp1->left==NULL && temp1->right==NULL) {
delete temp;
}
else if (temp1->left==NULL || temp1->right==NULL){
if (temp1->left==NULL){
temp1->right->parent=temp1->parent;
temp1->parent->right=temp1->right;}
else {temp1->left->parent=temp1->parent;
temp1->parent->right=temp1->right;}}
else {












int main(){
binarysearchtree b;
int i;
int p;
int d;
int m=1;
while (m==1){
cout <<" Choose an option : 1.insert 2.display ";
cin>>i;

switch (i){
case 1 :
	cout<<"Enter Data : ";
	cin>>d;
	b.insert (b.root,d);
	break;
case 2 :
	b.display (b.root);
	break;
default :
	cout<<"Choose a valid option";
	break;
}

cout<<"Do you want to carry out more operations ? Enter y=1 or n=2 ~ ";
cin>>m;
}

return 0;
}
